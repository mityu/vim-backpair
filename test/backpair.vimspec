scriptencoding utf-8
let s:fn = themis#helper('scope').funcs('autoload/backpair.vim')
let s:scripter = themis#helper('scripter')

function s:getcurpos() abort
  return getcurpos()[1 : 2]
endfunction

function s:new_scripter() abort
  return s:scripter.new().set_auto_replace_termcodes(1)
endfunction

Describe backpair#clear_pairs()
  Before all
    let vars = s:fn.script_vars()
  End

  After all
    let vars.rules = {}
    unlet vars
  End

  It clears rule.
    let vars.rules = {'(': {')': {')': {'backlen': 1, 'opts': {}}}}}
    call g:assert.not_empty(s:fn.script_vars().rules)
    call backpair#clear_pairs()
    call g:assert.empty(s:fn.script_vars().rules)
  End

End

Describe backpair#add_pair()
  Before all
    let Vars = s:fn.script_vars
  End

  After all
    call backpair#clear_pairs()
    unlet Vars
  End

  Before each
    call backpair#clear_pairs()
  End

  It adds one rule.
    call backpair#add_pair('(', ')')
    Assert Equals(Vars().rules, {'(': {')': {')': {'backlen': 1, 'opts': {}}}}})
  End

  It adds some rules.
    call backpair#add_pair('(', ')')
    call backpair#add_pair('<', '>')
    Assert Equals(Vars().rules, {'(': {')': {')': {'backlen': 1, 'opts': {}}}}, '<': {'>': {'>': {'backlen': 1, 'opts': {}}}}})
  End

  It overwrites an existing rule.
    call backpair#add_pair('(', '))')
    call backpair#add_pair('(', ')')
    Assert Equals(Vars().rules, {'(': {')': {')': {'backlen': 1, 'opts': {}}}}})
  End

  It accepts multiple length pair.
    const expected = {'\': {'(': {'\': {')': {')': {'backlen': 2, 'opts': {}}}}}}}
    call backpair#add_pair('\(', '\)')
    Assert Equals(Vars().rules, expected)
  End

  It accepts multibyte character.
    call backpair#add_pair('「', '」')
    Assert Equals(Vars().rules, {'「': {'」': {'」': {'backlen': 1, 'opts': {}}}}})

    call backpair#clear_pairs()

    const expected = {'「': {'「': {'」': {'」': {'backlen': 1, 'opts': {}}}}}}
    call backpair#add_pair('「「', '」')
    Assert Equals(Vars().rules, expected)
  End

  It doesn't accept rules with empty closing pair.
    call backpair#add_pair('*', '')
    Assert Empty(Vars().rules)
  End

  It accepts rules with {opts}.
    let opts = {
      \ 'enable_filetypes': ['vim', 'lua'],
      \ 'disable_filetypes': ['c', 'cpp'],
      \ 'condition': {-> v:false},
      \}
    call backpair#add_pair('<', '>', opts)
    call backpair#add_pair('(', ')')
    Assert Equals(Vars().rules, {'(': {')': {')': {'backlen': 1, 'opts': {}}}}, '<': {'>': {'>': {'backlen': 1, 'opts': opts}}}})
  End

End

Describe backpair.vim
  After all
    call backpair#clear_pairs()
  End

  Before each
    %bwipeout!
    call backpair#clear_pairs()

    " Restart plugin
    call backpair#disable()
    call backpair#enable()
  End

  It applies a rule in one rule.
    call backpair#add_pair('(', ')')
    call s:new_scripter()
      \.feedkeys('i()')
      \.call({-> g:assert.equals(getline('.'), '()')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 3])})
      \.feedkeys(')')
      \.call({-> g:assert.equals(getline('.'), '()')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 2])})
      \.feedkeys('<ESC>')
      \.run()
  End

  It applies a quote rule.
    call backpair#add_pair('"', '"')
    call setline(1, '"')
    call s:new_scripter()
      \.feedkeys('A"')
      \.call({-> g:assert.equals(getline('.'), '""')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 3])})
      \.feedkeys('"')
      \.call({-> g:assert.equals(getline('.'), '"""')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 4])})
      \.feedkeys('"')
      \.call({-> g:assert.equals(getline('.'), '"""')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 3])})
      \.feedkeys('<ESC>')
      \.run()
  End

  It applies a multi-length rule.
    call backpair#add_pair('\(', '\)')
    call s:new_scripter()
      \.feedkeys('i\(\)')
      \.call({-> g:assert.equals(getline('.'), '\(\)')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 5])})
      \.feedkeys(')')
      \.call({-> g:assert.equals(getline('.'), '\(\)')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 3])})
      \.feedkeys('<ESC>')
      \.run()
  End

  It applies a rule on newline.
    call backpair#add_pair('<', '>')
    call s:new_scripter()
      \.feedkeys('i<><CR><>>')
      \.call({-> g:assert.equals(getline('.'), '<>')})
      \.call({-> g:assert.equals(s:getcurpos(), [2, 2])})
      \.feedkeys('<ESC>')
      \.run()
  End

  It doesn't apply rules when cursor is moved.
    call backpair#add_pair('<', '>')
    call s:new_scripter()
      \.feedkeys('i<><left>>')
      \.call({-> g:assert.equals(getline('.'), '<>>')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 3])})
      \.feedkeys('<ESC>')
      \.run()
  End

  It doesn't apply rules when character deletion happens.
    call backpair#add_pair('<', '>')
    call s:new_scripter()
      \.feedkeys('i<><C-h>>>')
      \.call({-> g:assert.equals(getline('.'), '<>>')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 4])})
      \.feedkeys('<ESC>')
      \.run()
  End

  It applies a rule in multiple rules.
    call backpair#add_pair('(', ')')
    call backpair#add_pair('\(', '\)')
    call s:new_scripter()
      \.feedkeys('i\(\))')
      \.call({-> g:assert.equals(getline('.'), '\(\)')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 3])})
      \.feedkeys('<ESC>')
      \.run()
    call s:new_scripter()
      \.feedkeys('o\())')
      \.call({-> g:assert.equals(getline('.'), '\()')})
      \.call({-> g:assert.equals(s:getcurpos(), [2, 3])})
      \.feedkeys('<ESC>')
      \.run()
  End

  It supports multibyte characters.
    call backpair#add_pair('「', '」')
    call s:new_scripter()
      \.feedkeys('i「」」')
      \.call({-> g:assert.equals(getline('.'), '「」')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, strlen('「') + 1])})
      \.feedkeys('<ESC>')
      \.run()
  End

  It only enables a rule for the filetype that {opts}.enable_filetypes has.
    call backpair#add_pair('<', '>', {'enable_filetypes': ['vim', 'c']})
    call s:new_scripter()
      \.feedkeys('i<>>')
      \.call({-> g:assert.equals(getline('.'), '<>>')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 4])})
      \.feedkeys('<ESC>')
      \.run()

    %delete _
    set filetype=vim
    call s:new_scripter()
      \.feedkeys('i<>>')
      \.call({-> g:assert.equals(getline('.'), '<>')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 2])})
      \.feedkeys('<ESC>')
      \.run()

    %delete _
    set filetype=c
    call s:new_scripter()
      \.feedkeys('i<>>')
      \.call({-> g:assert.equals(getline('.'), '<>')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 2])})
      \.feedkeys('<ESC>')
      \.run()
  End

  It disables a rule for the filetype that {opts}.disable_filetypes has.
    call backpair#add_pair('<', '>', {'disable_filetypes': ['vim', 'c']})
    call s:new_scripter()
      \.feedkeys('i<>>')
      \.call({-> g:assert.equals(getline('.'), '<>')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 2])})
      \.feedkeys('<ESC>')
      \.run()

    %delete _
    set filetype=vim
    call s:new_scripter()
      \.feedkeys('i<>>')
      \.call({-> g:assert.equals(getline('.'), '<>>')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 4])})
      \.feedkeys('<ESC>')
      \.run()

    %delete _
    set filetype=c
    call s:new_scripter()
      \.feedkeys('i<>>')
      \.call({-> g:assert.equals(getline('.'), '<>>')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 4])})
      \.feedkeys('<ESC>')
      \.run()
  End

  It disables a rule when {opts}.condition returns falsy value.
    call backpair#add_pair('<', '>', {'condition': {-> line('.') == 2}})
    call s:new_scripter()
      \.feedkeys('i<>>')
      \.call({-> g:assert.equals(getline('.'), '<>>')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 4])})
      \.feedkeys('<CR><>>')
      \.call({-> g:assert.equals(getline('.'), '<>')})
      \.call({-> g:assert.equals(s:getcurpos(), [2, 2])})
      \.feedkeys('<End><CR><>>')
      \.call({-> g:assert.equals(getline('.'), '<>>')})
      \.call({-> g:assert.equals(s:getcurpos(), [3, 4])})
      \.feedkeys('<ESC>')
      \.run()
  End

  It calls {opts}.condition before the latest input is applied for the buffer.
    let line = 'initial-dummy-content'
    function s:F() closure
      let line = getline('.')
      return v:false
    endfunction

    call backpair#add_pair('<', '>',
      \ {'condition': funcref('s:F')})

    call s:new_scripter()
      \.feedkeys('i<>>')
      \.call({-> g:assert.equals(getline('.'), '<>>')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 4])})
      \.feedkeys('<ESC>')
      \.run()

    Assert Equals(line, '<>')
    Assert Equals(getline('.'), '<>>')

    delfunction s:F
  End

  It skips disabled rule(s) in same iteration.
    call backpair#add_pair('[[', ']]', {'condition': {-> v:false}})
    call backpair#add_pair('[]', ']')

    call s:new_scripter()
      \.feedkeys('i[[]]')
      \.call({-> g:assert.equals(getline('.'), '[[]]')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 5])})
      \.feedkeys(']')
      \.call({-> g:assert.equals(getline('.'), '[[]]')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 4])})
      \.feedkeys('<ESC>')
      \.run()
  End

  It skips disabled rule(s) in next iteration.
    call backpair#add_pair('[[', ']]', {'condition': {-> v:false}})
    call backpair#add_pair('[', ']]]+')

    call s:new_scripter()
      \.feedkeys('i[[]]')
      \.call({-> g:assert.equals(getline('.'), '[[]]')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 5])})
      \.feedkeys(']')
      \.call({-> g:assert.equals(getline('.'), '[[]]]')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 6])})
      \.feedkeys('+')
      \.call({-> g:assert.equals(getline('.'), '[[]]]+')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 7])})
      \.feedkeys('+')
      \.call({-> g:assert.equals(getline('.'), '[[]]]+')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 3])})
      \.feedkeys('<ESC>')
      \.run()
  End

  It disables a rule when one of {opts}.skip_if_ongoing is in ongoing rules.
    call backpair#add_pair('[[', ']]')
    call backpair#add_pair('[', ']', {'skip_if_ongoing': ['[[]']})

    call s:new_scripter()
      \.feedkeys('i[[]]')
      \.call({-> g:assert.equals(getline('.'), '[[]]')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 5])})
      \.feedkeys(']')
      \.call({-> g:assert.equals(getline('.'), '[[]]')})
      \.call({-> g:assert.equals(s:getcurpos(), [1, 3])})
      \.feedkeys('<ESC>')
      \.run()
  End

End
